{"version":3,"file":"user.js","sources":["store/modules/user.js"],"sourcesContent":["/**\r\n * 用户状态管理模块\r\n */\r\nimport { getUserInfo, setUserInfo, getToken, setToken, clearUserLoginState } from '../../utils/storage.js';\r\nimport { isLoggedIn, silentLogin, fullLogin, logout, fetchAndSaveUserInfo } from '../../utils/auth.js';\r\n\r\n// 添加监听登录窗口事件\r\nuni.$on('showLoginModal', () => {\r\n  const store = getApp().$vm.$store;\r\n  if (store) {\r\n    // 触发登录窗口显示的action\r\n    store.dispatch('user/showLoginModal');\r\n  }\r\n});\r\n\r\n// 状态\r\nexport const state = {\r\n  // 用户信息\r\n  userInfo: getUserInfo() || {},\r\n  // token\r\n  token: getToken() || '',\r\n  // 是否已登录\r\n  isLogin: isLoggedIn(),\r\n  // 登录加载状态\r\n  loginLoading: false,\r\n  // 是否显示登录窗口\r\n  showLoginModal: false\r\n};\r\n\r\n// 修改状态的同步方法\r\nexport const mutations = {\r\n  // 设置用户信息\r\n  SET_USER_INFO(state, userInfo) {\r\n    state.userInfo = userInfo;\r\n    setUserInfo(userInfo);\r\n  },\r\n  // 设置token\r\n  SET_TOKEN(state, token) {\r\n    state.token = token;\r\n    setToken(token);\r\n    state.isLogin = isLoggedIn();\r\n  },\r\n  // 清除登录状态\r\n  CLEAR_LOGIN_STATE(state) {\r\n    state.userInfo = {};\r\n    state.token = '';\r\n    state.isLogin = false;\r\n    clearUserLoginState();\r\n  },\r\n  // 设置登录加载状态\r\n  SET_LOGIN_LOADING(state, status) {\r\n    state.loginLoading = status;\r\n  },\r\n  // 设置登录窗口显示状态\r\n  SET_LOGIN_MODAL(state, status) {\r\n    state.showLoginModal = status;\r\n  }\r\n};\r\n\r\n// 包含异步操作的方法\r\nexport const actions = {\r\n  // 静默登录\r\n  async silentLogin({ commit }) {\r\n    commit('SET_LOGIN_LOADING', true);\r\n    try {\r\n      const result = await silentLogin();\r\n      \r\n      if (result) {\r\n        // 确保先设置token，再设置用户信息，顺序很重要\r\n        if (result.token) {\r\n          commit('SET_TOKEN', result.token);\r\n        }\r\n        \r\n        // 如果有用户信息，直接使用\r\n        if (result.userInfo) {\r\n          commit('SET_USER_INFO', result.userInfo);\r\n        } \r\n        // 否则尝试获取用户信息\r\n        else if (isLoggedIn()) {\r\n          try {\r\n            const userInfo = await fetchAndSaveUserInfo();\r\n            if (userInfo) {\r\n              commit('SET_USER_INFO', userInfo);\r\n            }\r\n          } catch (infoError) {\r\n            // 获取用户信息失败\r\n          }\r\n        }\r\n      }\r\n      \r\n      commit('SET_LOGIN_LOADING', false);\r\n      return result;\r\n    } catch (error) {\r\n      commit('SET_LOGIN_LOADING', false);\r\n      return Promise.reject(error);\r\n    }\r\n  },\r\n  \r\n  // 完整登录流程\r\n  async login({ commit }) {\r\n    commit('SET_LOGIN_LOADING', true);\r\n    try {\r\n      const result = await fullLogin();\r\n      if (result) {\r\n        if (result.token) {\r\n          commit('SET_TOKEN', result.token);\r\n        }\r\n        if (result.userInfo) {\r\n          commit('SET_USER_INFO', result.userInfo);\r\n        }\r\n        // 登录成功后关闭登录窗口\r\n        commit('SET_LOGIN_MODAL', false);\r\n      }\r\n      commit('SET_LOGIN_LOADING', false);\r\n      return result;\r\n    } catch (error) {\r\n      commit('SET_LOGIN_LOADING', false);\r\n      return Promise.reject(error);\r\n    }\r\n  },\r\n  \r\n  // 获取用户信息\r\n  async getUserInfo({ commit, state }) {\r\n    // 始终获取最新的用户信息，确保数据准确\r\n    try {\r\n      const userInfo = await fetchAndSaveUserInfo();\r\n      if (userInfo) {\r\n        // 确保兼容性：将id字段复制到clientId\r\n        if (userInfo.id && !userInfo.clientId) {\r\n          userInfo.clientId = userInfo.id;\r\n        }\r\n        \r\n        commit('SET_USER_INFO', userInfo);\r\n        \r\n        // 确保登录状态一致\r\n        if (!state.isLogin && (userInfo.clientId || userInfo.id)) {\r\n          // 有用户ID但登录状态为false时，更新登录状态\r\n          const token = getToken();\r\n          if (token) {\r\n            commit('SET_TOKEN', token);\r\n          }\r\n        }\r\n      }\r\n      return userInfo;\r\n    } catch (error) {\r\n      // 如果是401错误，清除登录状态\r\n      if (error.code === 401) {\r\n        commit('CLEAR_LOGIN_STATE');\r\n      }\r\n      \r\n      return Promise.reject(error);\r\n    }\r\n  },\r\n  \r\n  // 退出登录\r\n  logout({ commit }) {\r\n    logout();\r\n    commit('CLEAR_LOGIN_STATE');\r\n  },\r\n  \r\n  // 显示登录窗口\r\n  showLoginModal({ commit }) {\r\n    commit('CLEAR_LOGIN_STATE'); // 先清除登录状态\r\n    commit('SET_LOGIN_MODAL', true); // 再显示登录窗口\r\n  },\r\n  \r\n  // 关闭登录窗口\r\n  hideLoginModal({ commit }) {\r\n    commit('SET_LOGIN_MODAL', false);\r\n  }\r\n};\r\n\r\n// 获取状态的计算属性\r\nexport const getters = {\r\n  // 是否已登录\r\n  isLoggedIn: state => state.isLogin,\r\n  // 用户信息\r\n  userInfo: state => state.userInfo,\r\n  // token\r\n  token: state => state.token,\r\n  // 是否显示登录窗口\r\n  showLoginModal: state => state.showLoginModal\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters\r\n}; "],"names":["uni","getUserInfo","getToken","isLoggedIn","state","setUserInfo","setToken","clearUserLoginState","silentLogin","fetchAndSaveUserInfo","fullLogin","logout"],"mappings":"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"}