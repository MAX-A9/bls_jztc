{"version":3,"file":"region.js","sources":["store/modules/region.js"],"sourcesContent":["import { get } from '@/utils/request.js';\r\nimport { getStringFirstLetter } from '@/utils/pinyin.js';\r\n\r\n// 初始状态\r\nconst state = {\r\n  regionList: [], // 地区列表\r\n  loading: false, // 加载状态\r\n  error: null, // 错误信息\r\n};\r\n\r\n// getters\r\nconst getters = {\r\n  // 按字母分组的地区列表\r\n  groupedRegionList: (state) => {\r\n    const result = {};\r\n    \r\n    if (!state.regionList.length) {\r\n      return result;\r\n    }\r\n    \r\n    // 按地区名称首字母进行分组（使用拼音首字母）\r\n    state.regionList.forEach(region => {\r\n      const firstLetter = getStringFirstLetter(region.name);\r\n      if (!result[firstLetter]) {\r\n        result[firstLetter] = [];\r\n      }\r\n      result[firstLetter].push(region);\r\n    });\r\n    \r\n    return result;\r\n  },\r\n  \r\n  // 获取热门地区\r\n  hotRegions: (state) => {\r\n    // 如果API返回的数据中包含hot标记，则使用标记的方式获取热门城市\r\n    const hotRegions = state.regionList.filter(region => region.hot === 1);\r\n    \r\n    // 如果没有标记为热门的城市，则返回前9个作为热门城市\r\n    return hotRegions.length > 0 ? hotRegions : state.regionList.slice(0, 9);\r\n  }\r\n};\r\n\r\n// mutations\r\nconst mutations = {\r\n  // 设置地区列表\r\n  SET_REGION_LIST(state, regionList) {\r\n    state.regionList = regionList;\r\n  },\r\n  \r\n  // 设置加载状态\r\n  SET_LOADING(state, status) {\r\n    state.loading = status;\r\n  },\r\n  \r\n  // 设置错误信息\r\n  SET_ERROR(state, error) {\r\n    state.error = error;\r\n  }\r\n};\r\n\r\n// actions\r\nconst actions = {\r\n  // 获取地区列表\r\n  async getRegionList({ commit }, params = { status: 0 }) {\r\n    commit('SET_LOADING', true);\r\n    commit('SET_ERROR', null);\r\n    \r\n    try {\r\n      const response = await get('/wx/client/region/list', params, true);\r\n      \r\n      if (response && response.code === 0) {\r\n        // 处理接口返回的数据，注意数据在 response.data.list 中\r\n        const regionList = response.data.list.map(item => ({\r\n          id: item.id,\r\n          name: item.name,\r\n          location: item.location,\r\n          level: item.level,\r\n          hot: item.hot || 0, // 添加热门标记，默认为0\r\n          status: item.status,\r\n          createdAt: item.createdAt,\r\n          updatedAt: item.updatedAt\r\n        }));\r\n        \r\n        commit('SET_REGION_LIST', regionList);\r\n        \r\n        // 将数据保存到本地存储，方便下次使用\r\n        try {\r\n          uni.setStorageSync('regionList', JSON.stringify(regionList));\r\n          console.log('区域列表数据已保存到本地存储，共', regionList.length, '条记录');\r\n        } catch (storageError) {\r\n          console.error('保存区域列表到本地存储失败:', storageError);\r\n        }\r\n        \r\n        return regionList;\r\n      } else {\r\n        commit('SET_ERROR', response?.message || '获取地区列表失败');\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error('获取地区列表出错:', error);\r\n      commit('SET_ERROR', error.message || '获取地区列表失败');\r\n      return [];\r\n    } finally {\r\n      commit('SET_LOADING', false);\r\n    }\r\n  }\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  mutations,\r\n  actions\r\n}; "],"names":["state","region","getStringFirstLetter","get","uni"],"mappings":";;;;AAIA,MAAM,QAAQ;AAAA,EACZ,YAAY,CAAE;AAAA;AAAA,EACd,SAAS;AAAA;AAAA,EACT,OAAO;AAAA;AACT;AAGA,MAAM,UAAU;AAAA;AAAA,EAEd,mBAAmB,CAACA,WAAU;AAC5B,UAAM,SAAS,CAAA;AAEf,QAAI,CAACA,OAAM,WAAW,QAAQ;AAC5B,aAAO;AAAA,IACR;AAGD,IAAAA,OAAM,WAAW,QAAQ,CAAAC,YAAU;AACjC,YAAM,cAAcC,aAAAA,qBAAqBD,QAAO,IAAI;AACpD,UAAI,CAAC,OAAO,WAAW,GAAG;AACxB,eAAO,WAAW,IAAI;MACvB;AACD,aAAO,WAAW,EAAE,KAAKA,OAAM;AAAA,IACrC,CAAK;AAED,WAAO;AAAA,EACR;AAAA;AAAA,EAGD,YAAY,CAACD,WAAU;AAErB,UAAM,aAAaA,OAAM,WAAW,OAAO,CAAAC,YAAUA,QAAO,QAAQ,CAAC;AAGrE,WAAO,WAAW,SAAS,IAAI,aAAaD,OAAM,WAAW,MAAM,GAAG,CAAC;AAAA,EACxE;AACH;AAGA,MAAM,YAAY;AAAA;AAAA,EAEhB,gBAAgBA,QAAO,YAAY;AACjC,IAAAA,OAAM,aAAa;AAAA,EACpB;AAAA;AAAA,EAGD,YAAYA,QAAO,QAAQ;AACzB,IAAAA,OAAM,UAAU;AAAA,EACjB;AAAA;AAAA,EAGD,UAAUA,QAAO,OAAO;AACtB,IAAAA,OAAM,QAAQ;AAAA,EACf;AACH;AAGA,MAAM,UAAU;AAAA;AAAA,EAEd,MAAM,cAAc,EAAE,OAAQ,GAAE,SAAS,EAAE,QAAQ,KAAK;AACtD,WAAO,eAAe,IAAI;AAC1B,WAAO,aAAa,IAAI;AAExB,QAAI;AACF,YAAM,WAAW,MAAMG,cAAG,IAAC,0BAA0B,QAAQ,IAAI;AAEjE,UAAI,YAAY,SAAS,SAAS,GAAG;AAEnC,cAAM,aAAa,SAAS,KAAK,KAAK,IAAI,WAAS;AAAA,UACjD,IAAI,KAAK;AAAA,UACT,MAAM,KAAK;AAAA,UACX,UAAU,KAAK;AAAA,UACf,OAAO,KAAK;AAAA,UACZ,KAAK,KAAK,OAAO;AAAA;AAAA,UACjB,QAAQ,KAAK;AAAA,UACb,WAAW,KAAK;AAAA,UAChB,WAAW,KAAK;AAAA,QACjB,EAAC;AAEF,eAAO,mBAAmB,UAAU;AAGpC,YAAI;AACFC,wBAAG,MAAC,eAAe,cAAc,KAAK,UAAU,UAAU,CAAC;AAC3DA,8BAAY,MAAA,OAAA,iCAAA,oBAAoB,WAAW,QAAQ,KAAK;AAAA,QACzD,SAAQ,cAAc;AACrBA,8EAAc,kBAAkB,YAAY;AAAA,QAC7C;AAED,eAAO;AAAA,MACf,OAAa;AACL,eAAO,cAAa,qCAAU,YAAW,UAAU;AACnD,eAAO;MACR;AAAA,IACF,SAAQ,OAAO;AACdA,oBAAc,MAAA,MAAA,SAAA,kCAAA,aAAa,KAAK;AAChC,aAAO,aAAa,MAAM,WAAW,UAAU;AAC/C,aAAO;IACb,UAAc;AACR,aAAO,eAAe,KAAK;AAAA,IAC5B;AAAA,EACF;AACH;AAEA,MAAe,SAAA;AAAA,EACb,YAAY;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;;"}