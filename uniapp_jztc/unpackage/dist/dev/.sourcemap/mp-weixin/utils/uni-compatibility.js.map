{"version":3,"file":"uni-compatibility.js","sources":["utils/uni-compatibility.js"],"sourcesContent":["/**\r\n * uni-app API 兼容性适配\r\n * 用于处理废弃的API，确保第三方UI组件可以正常工作\r\n */\r\n\r\n// 缓存获取的系统信息，避免重复调用API\r\nlet cachedSystemInfo = null;\r\n\r\n/**\r\n * 获取系统信息的兼容处理函数\r\n * 用于替代废弃的 getSystemInfoSync\r\n * @returns {Object} 系统信息\r\n */\r\nfunction getCompatibleSystemInfo() {\r\n  if (cachedSystemInfo) return cachedSystemInfo;\r\n  \r\n  try {\r\n    // 使用新的API\r\n    const windowInfo = uni.getWindowInfo ? uni.getWindowInfo() : {};\r\n    const deviceInfo = uni.getDeviceInfo ? uni.getDeviceInfo() : {};\r\n    const appBaseInfo = uni.getAppBaseInfo ? uni.getAppBaseInfo() : {};\r\n    const systemSetting = uni.getSystemSetting ? uni.getSystemSetting() : {};\r\n    \r\n    // 组合成兼容旧API的格式\r\n    cachedSystemInfo = {\r\n      // 窗口信息\r\n      windowWidth: windowInfo.windowWidth,\r\n      windowHeight: windowInfo.windowHeight, \r\n      screenWidth: windowInfo.screenWidth,\r\n      screenHeight: windowInfo.screenHeight,\r\n      statusBarHeight: windowInfo.statusBarHeight,\r\n      safeArea: windowInfo.safeArea,\r\n      pixelRatio: windowInfo.pixelRatio,\r\n      \r\n      // 设备信息\r\n      brand: deviceInfo.brand,\r\n      model: deviceInfo.model,\r\n      system: deviceInfo.system,\r\n      platform: deviceInfo.platform,\r\n      \r\n      // APP基础信息\r\n      SDKVersion: appBaseInfo.SDKVersion,\r\n      appName: appBaseInfo.appName,\r\n      appVersion: appBaseInfo.appVersion,\r\n      appLanguage: appBaseInfo.appLanguage,\r\n      theme: appBaseInfo.theme,\r\n      \r\n      // 系统设置\r\n      bluetoothEnabled: systemSetting.bluetoothEnabled,\r\n      locationEnabled: systemSetting.locationEnabled,\r\n      wifiEnabled: systemSetting.wifiEnabled,\r\n      \r\n      // 兼容字段\r\n      language: appBaseInfo.appLanguage,\r\n      version: appBaseInfo.appVersion\r\n    };\r\n    \r\n    return cachedSystemInfo;\r\n  } catch (error) {\r\n    console.error('获取兼容系统信息失败:', error);\r\n    \r\n    // 尝试使用旧的API方式获取\r\n    try {\r\n      const legacyInfo = uni.getSystemInfo({ sync: true });\r\n      cachedSystemInfo = legacyInfo;\r\n      return legacyInfo;\r\n    } catch (fallbackError) {\r\n      console.error('获取系统信息兼容处理失败:', fallbackError);\r\n      // 返回最小默认值\r\n      return {\r\n        windowWidth: 375,\r\n        windowHeight: 667,\r\n        screenWidth: 375,\r\n        screenHeight: 667,\r\n        statusBarHeight: 20,\r\n        pixelRatio: 2,\r\n        platform: 'android',\r\n        language: 'zh-Hans'\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 兼容性API适配器初始化\r\n * 用于全局替换废弃的API\r\n */\r\nfunction initUniCompatibility() {\r\n  // 保存原始方法\r\n  const originalGetSystemInfoSync = uni.getSystemInfoSync;\r\n  \r\n  // 替换为兼容方法\r\n  uni.getSystemInfoSync = function() {\r\n    console.warn('wx.getSystemInfoSync 已废弃，请使用 wx.getWindowInfo/wx.getDeviceInfo/wx.getAppBaseInfo 等代替');\r\n    return getCompatibleSystemInfo();\r\n  };\r\n  \r\n  // 确保uni.getSystemInfo方法也使用新的API\r\n  const originalGetSystemInfo = uni.getSystemInfo;\r\n  uni.getSystemInfo = function(options) {\r\n    // 如果是同步调用\r\n    if (options && options.sync === true) {\r\n      if (typeof options.success === 'function') {\r\n        options.success(getCompatibleSystemInfo());\r\n      }\r\n      return getCompatibleSystemInfo();\r\n    }\r\n    \r\n    // 如果是异步调用\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const info = getCompatibleSystemInfo();\r\n        if (typeof options?.success === 'function') {\r\n          options.success(info);\r\n        }\r\n        resolve(info);\r\n      } catch (error) {\r\n        if (typeof options?.fail === 'function') {\r\n          options.fail(error);\r\n        }\r\n        reject(error);\r\n      } finally {\r\n        if (typeof options?.complete === 'function') {\r\n          options.complete();\r\n        }\r\n      }\r\n    });\r\n  };\r\n  \r\n  console.log('uni-app 兼容性适配已完成');\r\n}\r\n\r\n// 导出函数\r\nexport { getCompatibleSystemInfo, initUniCompatibility }\r\n\r\n// 导出默认对象\r\nexport default {\r\n  getCompatibleSystemInfo,\r\n  initUniCompatibility\r\n}; "],"names":["uni"],"mappings":";;AAMA,IAAI,mBAAmB;AAOvB,SAAS,0BAA0B;AACjC,MAAI;AAAkB,WAAO;AAE7B,MAAI;AAEF,UAAM,aAAaA,cAAAA,MAAI,gBAAgBA,cAAAA,MAAI,cAAe,IAAG;AAC7D,UAAM,aAAaA,cAAAA,MAAI,gBAAgBA,cAAAA,MAAI,cAAe,IAAG;AAC7D,UAAM,cAAcA,cAAAA,MAAI,iBAAiBA,cAAAA,MAAI,eAAgB,IAAG;AAChE,UAAM,gBAAgBA,cAAAA,MAAI,mBAAmBA,cAAAA,MAAI,iBAAkB,IAAG;AAGtE,uBAAmB;AAAA;AAAA,MAEjB,aAAa,WAAW;AAAA,MACxB,cAAc,WAAW;AAAA,MACzB,aAAa,WAAW;AAAA,MACxB,cAAc,WAAW;AAAA,MACzB,iBAAiB,WAAW;AAAA,MAC5B,UAAU,WAAW;AAAA,MACrB,YAAY,WAAW;AAAA;AAAA,MAGvB,OAAO,WAAW;AAAA,MAClB,OAAO,WAAW;AAAA,MAClB,QAAQ,WAAW;AAAA,MACnB,UAAU,WAAW;AAAA;AAAA,MAGrB,YAAY,YAAY;AAAA,MACxB,SAAS,YAAY;AAAA,MACrB,YAAY,YAAY;AAAA,MACxB,aAAa,YAAY;AAAA,MACzB,OAAO,YAAY;AAAA;AAAA,MAGnB,kBAAkB,cAAc;AAAA,MAChC,iBAAiB,cAAc;AAAA,MAC/B,aAAa,cAAc;AAAA;AAAA,MAG3B,UAAU,YAAY;AAAA,MACtB,SAAS,YAAY;AAAA,IAC3B;AAEI,WAAO;AAAA,EACR,SAAQ,OAAO;AACdA,kBAAc,MAAA,MAAA,SAAA,oCAAA,eAAe,KAAK;AAGlC,QAAI;AACF,YAAM,aAAaA,cAAAA,MAAI,cAAc,EAAE,MAAM,KAAI,CAAE;AACnD,yBAAmB;AACnB,aAAO;AAAA,IACR,SAAQ,eAAe;AACtBA,6EAAc,iBAAiB,aAAa;AAE5C,aAAO;AAAA,QACL,aAAa;AAAA,QACb,cAAc;AAAA,QACd,aAAa;AAAA,QACb,cAAc;AAAA,QACd,iBAAiB;AAAA,QACjB,YAAY;AAAA,QACZ,UAAU;AAAA,QACV,UAAU;AAAA,MAClB;AAAA,IACK;AAAA,EACF;AACH;AAMA,SAAS,uBAAuB;AAEIA,gBAAAA,MAAI;AAGtCA,gBAAG,MAAC,oBAAoB,WAAW;AACjCA,kBAAAA,MAAA,MAAA,QAAA,oCAAa,sFAAsF;AACnG,WAAO,wBAAuB;AAAA,EAClC;AAGgCA,gBAAAA,MAAI;AAClCA,sBAAI,gBAAgB,SAAS,SAAS;AAEpC,QAAI,WAAW,QAAQ,SAAS,MAAM;AACpC,UAAI,OAAO,QAAQ,YAAY,YAAY;AACzC,gBAAQ,QAAQ,wBAAuB,CAAE;AAAA,MAC1C;AACD,aAAO,wBAAuB;AAAA,IAC/B;AAGD,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAI;AACF,cAAM,OAAO;AACb,YAAI,QAAO,mCAAS,aAAY,YAAY;AAC1C,kBAAQ,QAAQ,IAAI;AAAA,QACrB;AACD,gBAAQ,IAAI;AAAA,MACb,SAAQ,OAAO;AACd,YAAI,QAAO,mCAAS,UAAS,YAAY;AACvC,kBAAQ,KAAK,KAAK;AAAA,QACnB;AACD,eAAO,KAAK;AAAA,MACpB,UAAgB;AACR,YAAI,QAAO,mCAAS,cAAa,YAAY;AAC3C,kBAAQ,SAAQ;AAAA,QACjB;AAAA,MACF;AAAA,IACP,CAAK;AAAA,EACL;AAEEA,gBAAAA,wDAAY,kBAAkB;AAChC;;"}