{"version":3,"file":"logger.js","sources":["utils/logger.js"],"sourcesContent":["/**\r\n * 日志控制工具\r\n * 用于控制应用中控制台日志的输出\r\n */\r\nimport { STORAGE_KEYS, LOG_CONFIG } from './constants.js';\r\n\r\n// 日志级别常量\r\nexport const LOG_LEVELS = {\r\n  NONE: 0,    // 不输出任何日志\r\n  ERROR: 1,   // 只输出错误\r\n  WARN: 2,    // 输出警告和错误\r\n  INFO: 3,    // 输出信息、警告和错误\r\n  DEBUG: 4,   // 输出所有日志，包括调试信息\r\n  ALL: 5      // 输出所有日志，包括调试信息和跟踪信息\r\n};\r\n\r\n// 从本地存储获取日志级别设置\r\nconst getSavedLogLevel = () => {\r\n  try {\r\n    const savedLevel = uni.getStorageSync(STORAGE_KEYS.LOG_LEVEL);\r\n    return savedLevel !== '' ? parseInt(savedLevel) : null;\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\n\r\n// 获取默认的日志级别\r\nconst getDefaultLogLevel = () => {\r\n  // 如果是非生产环境，则不禁用日志\r\n  if (process.env.NODE_ENV === 'development') {\r\n    return LOG_LEVELS.ALL;\r\n  }\r\n  \r\n  // 如果在生产环境中配置禁用所有日志\r\n  if (LOG_CONFIG.DISABLE_IN_PRODUCTION) {\r\n    // 如果配置保留错误日志，则只启用错误日志\r\n    return LOG_CONFIG.KEEP_ERROR_LOGS ? LOG_LEVELS.ERROR : LOG_LEVELS.NONE;\r\n  }\r\n  \r\n  // 默认情况下仅保留错误和警告日志\r\n  return LOG_LEVELS.WARN;\r\n};\r\n\r\n// 当前日志级别，优先使用保存的设置，否则使用默认设置\r\nlet currentLogLevel = getSavedLogLevel() || getDefaultLogLevel();\r\n\r\n// 保存原始控制台方法\r\nconst originalConsole = {\r\n  log: console.log,\r\n  info: console.info,\r\n  warn: console.warn,\r\n  error: console.error,\r\n  debug: console.debug\r\n};\r\n\r\n/**\r\n * 设置日志级别\r\n * @param {Number} level 日志级别\r\n */\r\nexport function setLogLevel(level) {\r\n  currentLogLevel = level;\r\n  \r\n  // 保存到本地存储\r\n  try {\r\n    uni.setStorageSync(STORAGE_KEYS.LOG_LEVEL, level.toString());\r\n  } catch (e) {\r\n    // 保存失败时不处理\r\n  }\r\n  \r\n  // 根据日志级别重写控制台方法\r\n  if (level >= LOG_LEVELS.DEBUG) {\r\n    console.debug = originalConsole.debug;\r\n  } else {\r\n    console.debug = function() {};\r\n  }\r\n  \r\n  if (level >= LOG_LEVELS.INFO) {\r\n    console.log = originalConsole.log;\r\n    console.info = originalConsole.info;\r\n  } else {\r\n    console.log = function() {};\r\n    console.info = function() {};\r\n  }\r\n  \r\n  if (level >= LOG_LEVELS.WARN) {\r\n    console.warn = originalConsole.warn;\r\n  } else {\r\n    console.warn = function() {};\r\n  }\r\n  \r\n  if (level >= LOG_LEVELS.ERROR) {\r\n    console.error = originalConsole.error;\r\n  } else {\r\n    console.error = function() {};\r\n  }\r\n  \r\n  // 如果级别为NONE，禁用所有输出\r\n  if (level === LOG_LEVELS.NONE) {\r\n    console.log = function() {};\r\n    console.info = function() {};\r\n    console.warn = function() {};\r\n    console.error = function() {};\r\n    console.debug = function() {};\r\n  }\r\n  \r\n  return currentLogLevel;\r\n}\r\n\r\n/**\r\n * 获取当前日志级别\r\n * @returns {Number} 当前日志级别\r\n */\r\nexport function getLogLevel() {\r\n  return currentLogLevel;\r\n}\r\n\r\n/**\r\n * 禁用所有控制台输出\r\n */\r\nexport function disableAllLogs() {\r\n  return setLogLevel(LOG_LEVELS.NONE);\r\n}\r\n\r\n/**\r\n * 只启用错误日志\r\n */\r\nexport function enableErrorLogsOnly() {\r\n  return setLogLevel(LOG_LEVELS.ERROR);\r\n}\r\n\r\n/**\r\n * 启用所有日志\r\n */\r\nexport function enableAllLogs() {\r\n  return setLogLevel(LOG_LEVELS.ALL);\r\n}\r\n\r\n// 初始化日志级别\r\nsetLogLevel(currentLogLevel);\r\n\r\n// 添加调试信息\r\nif (LOG_CONFIG.SHOW_DEV_INFO && process.env.NODE_ENV === 'development') {\r\n  console.log('[Logger] 日志级别:', currentLogLevel);\r\n}\r\n\r\n// 默认导出\r\nexport default {\r\n  LOG_LEVELS,\r\n  setLogLevel,\r\n  getLogLevel,\r\n  disableAllLogs,\r\n  enableErrorLogsOnly,\r\n  enableAllLogs\r\n}; "],"names":["uni","STORAGE_KEYS"],"mappings":";;;AAOO,MAAM,aAAa;AAAA,EACxB,MAAM;AAAA;AAAA,EACN,OAAO;AAAA;AAAA,EACP,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,OAAO;AAAA;AAAA,EACP,KAAK;AAAA;AACP;AAGA,MAAM,mBAAmB,MAAM;AACzB,MAAA;AACF,UAAM,aAAaA,cAAA,MAAI,eAAeC,gBAAA,aAAa,SAAS;AAC5D,WAAO,eAAe,KAAK,SAAS,UAAU,IAAI;AAAA,WAC3C,GAAG;AACH,WAAA;AAAA,EACT;AACF;AAGA,MAAM,qBAAqB,MAAM;AAEa;AAC1C,WAAO,WAAW;AAAA,EACpB;AAUF;AAGA,IAAI,kBAAkB,sBAAsB;AAG5C,MAAM,kBAAkB;AAAA,EACtB,KAAK,QAAQ;AAAA,EACb,MAAM,QAAQ;AAAA,EACd,MAAM,QAAQ;AAAA,EACd,OAAO,QAAQ;AAAA,EACf,OAAO,QAAQ;AACjB;AAMO,SAAS,YAAY,OAAO;AACf,oBAAA;AAGd,MAAA;AACFD,kBAAA,MAAI,eAAeC,gBAAA,aAAa,WAAW,MAAM,UAAU;AAAA,WACpD,GAAG;AAAA,EAEZ;AAGI,MAAA,SAAS,WAAW,OAAO;AAC7B,YAAQ,QAAQ,gBAAgB;AAAA,EAAA,OAC3B;AACL,YAAQ,QAAQ,WAAW;AAAA,IAAA;AAAA,EAC7B;AAEI,MAAA,SAAS,WAAW,MAAM;AAC5B,YAAQ,MAAM,gBAAgB;AAC9B,YAAQ,OAAO,gBAAgB;AAAA,EAAA,OAC1B;AACL,YAAQ,MAAM,WAAW;AAAA,IAAA;AACzB,YAAQ,OAAO,WAAW;AAAA,IAAA;AAAA,EAC5B;AAEI,MAAA,SAAS,WAAW,MAAM;AAC5B,YAAQ,OAAO,gBAAgB;AAAA,EAAA,OAC1B;AACL,YAAQ,OAAO,WAAW;AAAA,IAAA;AAAA,EAC5B;AAEI,MAAA,SAAS,WAAW,OAAO;AAC7B,YAAQ,QAAQ,gBAAgB;AAAA,EAAA,OAC3B;AACL,YAAQ,QAAQ,WAAW;AAAA,IAAA;AAAA,EAC7B;AAGI,MAAA,UAAU,WAAW,MAAM;AAC7B,YAAQ,MAAM,WAAW;AAAA,IAAA;AACzB,YAAQ,OAAO,WAAW;AAAA,IAAA;AAC1B,YAAQ,OAAO,WAAW;AAAA,IAAA;AAC1B,YAAQ,QAAQ,WAAW;AAAA,IAAA;AAC3B,YAAQ,QAAQ,WAAW;AAAA,IAAA;AAAA,EAC7B;AAEO,SAAA;AACT;AAMO,SAAS,cAAc;AACrB,SAAA;AACT;AAYO,SAAS,sBAAsB;AAC7B,SAAA,YAAY,WAAW,KAAK;AACrC;AAUA,YAAY,eAAe;AAG6C;AACtED,gBAAA,MAAY,MAAA,OAAA,0BAAA,kBAAkB,eAAe;AAC/C;;;;;"}