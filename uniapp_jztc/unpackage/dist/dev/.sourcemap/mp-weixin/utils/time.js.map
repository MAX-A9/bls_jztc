{"version":3,"file":"time.js","sources":["utils/time.js"],"sourcesContent":["/**\r\n * 时间格式化工具函数\r\n */\r\n\r\n/**\r\n * 格式化日期时间\r\n * @param {string|number|Date} date 日期对象、时间戳或日期字符串\r\n * @param {string} fmt 格式模板，如 'YYYY-MM-DD HH:mm:ss'\r\n * @returns {string} 格式化后的日期字符串\r\n */\r\nexport function formatDate(date, fmt = 'YYYY-MM-DD HH:mm:ss') {\r\n  if (!date) return '';\r\n  \r\n  // 转换为Date对象\r\n  if (typeof date === 'string' || typeof date === 'number') {\r\n    date = new Date(date);\r\n  }\r\n  \r\n  if (!(date instanceof Date) || isNaN(date.getTime())) {\r\n    return '';\r\n  }\r\n  \r\n  const o = {\r\n    'M+': date.getMonth() + 1, // 月份\r\n    'D+': date.getDate(), // 日\r\n    'H+': date.getHours(), // 小时\r\n    'h+': date.getHours() % 12 || 12, // 12小时制\r\n    'm+': date.getMinutes(), // 分\r\n    's+': date.getSeconds(), // 秒\r\n    'q+': Math.floor((date.getMonth() + 3) / 3), // 季度\r\n    'S': date.getMilliseconds() // 毫秒\r\n  };\r\n  \r\n  if (/(Y+)/.test(fmt)) {\r\n    fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));\r\n  }\r\n  \r\n  for (let k in o) {\r\n    if (new RegExp('(' + k + ')').test(fmt)) {\r\n      fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length)));\r\n    }\r\n  }\r\n  \r\n  return fmt;\r\n}\r\n\r\n/**\r\n * 获取友好的时间显示\r\n * @param {string|number|Date} date 日期对象、时间戳或日期字符串\r\n * @returns {string} 友好的时间，如：刚刚、5分钟前、1小时前、昨天、前天、3天前、1周前等\r\n */\r\nexport function getFriendlyTime(date) {\r\n  if (!date) return '';\r\n  \r\n  // 转换为Date对象\r\n  if (typeof date === 'string' || typeof date === 'number') {\r\n    date = new Date(date);\r\n  }\r\n  \r\n  if (!(date instanceof Date) || isNaN(date.getTime())) {\r\n    return '';\r\n  }\r\n  \r\n  const now = new Date();\r\n  const diff = (now.getTime() - date.getTime()) / 1000; // 转为秒\r\n  \r\n  // 小于5分钟，显示\"刚刚\"\r\n  if (diff < 300) {\r\n    return '刚刚';\r\n  }\r\n  \r\n  // 小于1小时，显示\"X分钟前\"\r\n  if (diff < 3600) {\r\n    return Math.floor(diff / 60) + '分钟前';\r\n  }\r\n  \r\n  // 小于24小时，显示\"X小时前\"\r\n  if (diff < 86400) {\r\n    return Math.floor(diff / 3600) + '小时前';\r\n  }\r\n  \r\n  // 小于48小时，显示\"昨天\"\r\n  if (diff < 172800) {\r\n    return '昨天';\r\n  }\r\n  \r\n  // 小于72小时，显示\"前天\"\r\n  if (diff < 259200) {\r\n    return '前天';\r\n  }\r\n  \r\n  // 小于1周（7天），显示\"X天前\"\r\n  if (diff < 604800) {\r\n    return Math.floor(diff / 86400) + '天前';\r\n  }\r\n  \r\n  // 小于1个月（按30天算），显示\"X周前\"\r\n  if (diff < 2592000) {\r\n    return Math.floor(diff / 604800) + '周前';\r\n  }\r\n  \r\n  // 小于1年（按365天算），显示\"X个月前\"\r\n  if (diff < 31536000) {\r\n    return Math.floor(diff / 2592000) + '个月前';\r\n  }\r\n  \r\n  // 大于等于1年，显示\"X年前\"\r\n  return Math.floor(diff / 31536000) + '年前';\r\n} "],"names":[],"mappings":";AAmDO,SAAS,gBAAgB,MAAM;AACpC,MAAI,CAAC;AAAM,WAAO;AAGlB,MAAI,OAAO,SAAS,YAAY,OAAO,SAAS,UAAU;AACxD,WAAO,IAAI,KAAK,IAAI;AAAA,EACrB;AAED,MAAI,EAAE,gBAAgB,SAAS,MAAM,KAAK,QAAO,CAAE,GAAG;AACpD,WAAO;AAAA,EACR;AAED,QAAM,MAAM,oBAAI;AAChB,QAAM,QAAQ,IAAI,QAAS,IAAG,KAAK,QAAS,KAAI;AAGhD,MAAI,OAAO,KAAK;AACd,WAAO;AAAA,EACR;AAGD,MAAI,OAAO,MAAM;AACf,WAAO,KAAK,MAAM,OAAO,EAAE,IAAI;AAAA,EAChC;AAGD,MAAI,OAAO,OAAO;AAChB,WAAO,KAAK,MAAM,OAAO,IAAI,IAAI;AAAA,EAClC;AAGD,MAAI,OAAO,QAAQ;AACjB,WAAO;AAAA,EACR;AAGD,MAAI,OAAO,QAAQ;AACjB,WAAO;AAAA,EACR;AAGD,MAAI,OAAO,QAAQ;AACjB,WAAO,KAAK,MAAM,OAAO,KAAK,IAAI;AAAA,EACnC;AAGD,MAAI,OAAO,QAAS;AAClB,WAAO,KAAK,MAAM,OAAO,MAAM,IAAI;AAAA,EACpC;AAGD,MAAI,OAAO,SAAU;AACnB,WAAO,KAAK,MAAM,OAAO,MAAO,IAAI;AAAA,EACrC;AAGD,SAAO,KAAK,MAAM,OAAO,OAAQ,IAAI;AACvC;;"}