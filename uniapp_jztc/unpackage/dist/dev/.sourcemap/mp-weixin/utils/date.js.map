{"version":3,"file":"date.js","sources":["utils/date.js"],"sourcesContent":["/**\r\n * 将日期字符串转换为时间戳，兼容iOS\r\n * @param {String|Number|Date} time 需要转换的时间\r\n * @return {Number} 时间戳\r\n */\r\nexport function getTimestamp(time) {\r\n  // 若参数为空，返回当前时间戳\r\n  if (!time) return Date.now();\r\n  \r\n  // 如果已经是时间戳，直接返回\r\n  if (typeof time === 'number') return time;\r\n  \r\n  // 如果是Date对象，返回其时间戳\r\n  if (time instanceof Date) return time.getTime();\r\n  \r\n  // 字符串类型需要特殊处理\r\n  if (typeof time === 'string') {\r\n    // 标准化日期格式，移除额外空格\r\n    time = time.trim();\r\n    \r\n    // 处理 yyyy-MM-dd HH:mm:ss 格式\r\n    if (/^\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2}$/.test(time)) {\r\n      // iOS兼容方案1: 转换为 yyyy/MM/dd HH:mm:ss\r\n      const slashStr = time.replace(/-/g, '/');\r\n      const date1 = new Date(slashStr);\r\n      if (!isNaN(date1.getTime())) {\r\n        return date1.getTime();\r\n      }\r\n      \r\n      // iOS兼容方案2: 转换为 yyyy-MM-ddTHH:mm:ss\r\n      const isoStr = time.replace(' ', 'T');\r\n      const date2 = new Date(isoStr);\r\n      if (!isNaN(date2.getTime())) {\r\n        return date2.getTime();\r\n      }\r\n    }\r\n    \r\n    // 尝试直接解析，某些格式在某些设备上可能有效\r\n    const directDate = new Date(time);\r\n    if (!isNaN(directDate.getTime())) {\r\n      return directDate.getTime();\r\n    }\r\n    \r\n    // 手动解析日期时间\r\n    // 匹配 yyyy-MM-dd 或 yyyy/MM/dd 格式，可选时间部分\r\n    const regex = /^(\\d{4})[/-](\\d{1,2})[/-](\\d{1,2})(?:[ T](\\d{1,2}):(\\d{1,2})(?::(\\d{1,2}))?)?$/;\r\n    if (regex.test(time)) {\r\n      const parts = time.match(regex);\r\n      const year = parseInt(parts[1], 10);\r\n      const month = parseInt(parts[2], 10) - 1; // 月份从0开始\r\n      const day = parseInt(parts[3], 10);\r\n      const hour = parts[4] ? parseInt(parts[4], 10) : 0;\r\n      const minute = parts[5] ? parseInt(parts[5], 10) : 0;\r\n      const second = parts[6] ? parseInt(parts[6], 10) : 0;\r\n      \r\n      // 使用本地时间创建Date对象\r\n      const manualDate = new Date(year, month, day, hour, minute, second);\r\n      return manualDate.getTime();\r\n    }\r\n  }\r\n  \r\n  // 所有方法都失败，使用当前时间并记录警告\r\n  console.warn('无法解析日期格式:', time);\r\n  return Date.now();\r\n}\r\n\r\n/**\r\n * 将时间格式化为多久前\r\n * @param {String|Number|Date} time 需要格式化的时间\r\n * @param {String} lang 语言，默认zh为中文，en为英文\r\n * @return {String} 格式化后的时间\r\n */\r\nexport function formatTimeAgo(time, lang = 'zh') {\r\n  if (!time) return '';\r\n  \r\n  // 获取时间戳\r\n  const timestamp = getTimestamp(time);\r\n  \r\n  const now = Date.now();\r\n  const diff = (now - timestamp) / 1000; // 转为秒\r\n  \r\n  // 定义时间单位\r\n  const units = {\r\n    zh: {\r\n      second: '秒',\r\n      minute: '分钟',\r\n      hour: '小时',\r\n      day: '天',\r\n      week: '周',\r\n      month: '个月',\r\n      year: '年'\r\n    },\r\n    en: {\r\n      second: 'second',\r\n      minute: 'minute',\r\n      hour: 'hour',\r\n      day: 'day',\r\n      week: 'week',\r\n      month: 'month',\r\n      year: 'year'\r\n    }\r\n  };\r\n  \r\n  // 获取对应语言的单位\r\n  const unit = units[lang] || units.zh;\r\n  const pluralSuffix = lang === 'en' ? 's' : ''; // 英文复数形式\r\n  \r\n  // 定义不同时间段的显示格式\r\n  if (diff < 5) {\r\n    return lang === 'zh' ? '刚刚' : 'just now';\r\n  } else if (diff < 60) {\r\n    return `${Math.floor(diff)}${unit.second}${lang === 'en' && Math.floor(diff) > 1 ? pluralSuffix : ''}${lang === 'zh' ? '前' : ' ago'}`;\r\n  } else if (diff < 3600) {\r\n    const minutes = Math.floor(diff / 60);\r\n    return `${minutes}${unit.minute}${lang === 'en' && minutes > 1 ? pluralSuffix : ''}${lang === 'zh' ? '前' : ' ago'}`;\r\n  } else if (diff < 86400) {\r\n    const hours = Math.floor(diff / 3600);\r\n    return `${hours}${unit.hour}${lang === 'en' && hours > 1 ? pluralSuffix : ''}${lang === 'zh' ? '前' : ' ago'}`;\r\n  } else if (diff < 604800) {\r\n    const days = Math.floor(diff / 86400);\r\n    return `${days}${unit.day}${lang === 'en' && days > 1 ? pluralSuffix : ''}${lang === 'zh' ? '前' : ' ago'}`;\r\n  } else if (diff < 2592000) {\r\n    const weeks = Math.floor(diff / 604800);\r\n    return `${weeks}${unit.week}${lang === 'en' && weeks > 1 ? pluralSuffix : ''}${lang === 'zh' ? '前' : ' ago'}`;\r\n  } else if (diff < 31536000) {\r\n    const months = Math.floor(diff / 2592000);\r\n    return `${months}${unit.month}${lang === 'en' && months > 1 ? pluralSuffix : ''}${lang === 'zh' ? '前' : ' ago'}`;\r\n  } else {\r\n    const years = Math.floor(diff / 31536000);\r\n    return `${years}${unit.year}${lang === 'en' && years > 1 ? pluralSuffix : ''}${lang === 'zh' ? '前' : ' ago'}`;\r\n  }\r\n}\r\n\r\n/**\r\n * 格式化日期为指定格式\r\n * @param {String|Number|Date} time 需要格式化的时间\r\n * @param {String} format 格式化的格式，默认为 YYYY-MM-DD\r\n * @return {String} 格式化后的时间\r\n */\r\nexport function formatDate(time, format = 'YYYY-MM-DD') {\r\n  if (!time) return '';\r\n  \r\n  // 获取时间戳并转换为Date对象\r\n  const timestamp = getTimestamp(time);\r\n  const date = new Date(timestamp);\r\n  \r\n  const year = date.getFullYear();\r\n  const month = date.getMonth() + 1;\r\n  const day = date.getDate();\r\n  const hour = date.getHours();\r\n  const minute = date.getMinutes();\r\n  const second = date.getSeconds();\r\n  \r\n  // 补零函数\r\n  const pad = (n) => n < 10 ? '0' + n : n;\r\n  \r\n  return format\r\n    .replace(/YYYY/g, year)\r\n    .replace(/YY/g, String(year).slice(2))\r\n    .replace(/MM/g, pad(month))\r\n    .replace(/M/g, month)\r\n    .replace(/DD/g, pad(day))\r\n    .replace(/D/g, day)\r\n    .replace(/HH/g, pad(hour))\r\n    .replace(/H/g, hour)\r\n    .replace(/hh/g, pad(hour % 12 || 12))\r\n    .replace(/h/g, hour % 12 || 12)\r\n    .replace(/mm/g, pad(minute))\r\n    .replace(/m/g, minute)\r\n    .replace(/ss/g, pad(second))\r\n    .replace(/s/g, second);\r\n} "],"names":["uni"],"mappings":"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"}