{"version":3,"file":"message-polling.js","sources":["utils/message-polling.js"],"sourcesContent":["/**\r\n * 消息轮询服务\r\n * 用于统一管理应用内的消息轮询，避免多个组件重复创建轮询\r\n */\r\nimport { getUnreadCount, getMessageList, getConversationList } from '@/apis/message.js';\r\n\r\nclass MessagePollingService {\r\n  constructor() {\r\n    this.pollingTimer = null;\r\n    this.pollingInterval = 5000; // 默认5秒\r\n    this.chatPollingInterval = 3000; // 聊天页面3秒\r\n    this.isPolling = false;\r\n    this.listeners = {\r\n      unreadCount: [], // 未读消息数监听器\r\n      chatMessages: [], // 聊天消息监听器\r\n      conversationList: [] // 会话列表监听器\r\n    };\r\n    this.chatParams = null; // 聊天轮询参数\r\n    this.conversationParams = null; // 会话列表轮询参数\r\n    this.globalPaused = false; // 全局暂停状态\r\n    this.previousPollingState = false; // 记录暂停前的轮询状态\r\n    this.whitelistPages = ['/pages/chat/detail']; // 白名单页面不受全局暂停影响\r\n    this.currentPage = ''; // 当前页面路径\r\n  }\r\n\r\n  /**\r\n   * 设置当前页面路径\r\n   * @param {String} pagePath - 页面路径\r\n   */\r\n  setCurrentPage(pagePath) {\r\n    this.currentPage = pagePath;\r\n    console.log('当前页面路径:', pagePath);\r\n    \r\n    // 如果当前页面在白名单中，且全局已暂停，则恢复轮询\r\n    if (this.isPageInWhitelist(pagePath) && this.globalPaused) {\r\n      console.log('当前页面在白名单中，恢复轮询');\r\n      this.resumePollingForWhitelist();\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 检查页面是否在白名单中\r\n   * @param {String} pagePath - 页面路径\r\n   * @returns {Boolean} 是否在白名单中\r\n   */\r\n  isPageInWhitelist(pagePath) {\r\n    return this.whitelistPages.some(whitePath => pagePath && pagePath.indexOf(whitePath) !== -1);\r\n  }\r\n  \r\n  /**\r\n   * 为白名单页面恢复轮询，但不改变全局暂停状态\r\n   */\r\n  resumePollingForWhitelist() {\r\n    if (this.globalPaused && !this.isPolling && this.previousPollingState) {\r\n      console.log('白名单页面特殊处理：恢复轮询但保持全局暂停状态');\r\n      this.isPolling = true;\r\n      this.poll();\r\n      \r\n      // 根据当前活跃的轮询类型选择合适的间隔\r\n      const interval = this.chatParams ? this.chatPollingInterval : this.pollingInterval;\r\n      \r\n      this.pollingTimer = setInterval(() => {\r\n        this.poll();\r\n      }, interval);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置轮询间隔时间\r\n   * @param {Number} interval - 轮询间隔(毫秒)\r\n   */\r\n  setPollingInterval(interval) {\r\n    this.pollingInterval = interval;\r\n    // 如果正在轮询，需要重新启动以应用新间隔\r\n    if (this.isPolling) {\r\n      this.stopPolling();\r\n      this.startPolling();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置聊天轮询间隔时间\r\n   * @param {Number} interval - 轮询间隔(毫秒)\r\n   */\r\n  setChatPollingInterval(interval) {\r\n    this.chatPollingInterval = interval;\r\n    \r\n    // 如果正在轮询且有聊天参数，需要重新启动以应用新间隔\r\n    if (this.isPolling && this.chatParams) {\r\n      this.stopPolling();\r\n      this.startPolling();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 启动轮询\r\n   */\r\n  startPolling() {\r\n    if (this.isPolling || this.globalPaused) return;\r\n\r\n    this.isPolling = true;\r\n    this.poll();\r\n\r\n    // 根据当前活跃的轮询类型选择合适的间隔\r\n    const interval = this.chatParams ? this.chatPollingInterval : this.pollingInterval;\r\n    \r\n    this.pollingTimer = setInterval(() => {\r\n      this.poll();\r\n    }, interval);\r\n\r\n    console.log(`消息轮询已启动，间隔 ${interval} ms`);\r\n  }\r\n\r\n  /**\r\n   * 停止轮询\r\n   */\r\n  stopPolling() {\r\n    if (this.pollingTimer) {\r\n      clearInterval(this.pollingTimer);\r\n      this.pollingTimer = null;\r\n    }\r\n    this.isPolling = false;\r\n    console.log('消息轮询已停止');\r\n  }\r\n\r\n  /**\r\n   * 全局暂停轮询（适用于进入非底部导航页面时）\r\n   * 此方法会记住当前的轮询状态，以便恢复时能够还原\r\n   */\r\n  pausePollingGlobally() {\r\n    if (this.globalPaused) return;\r\n    \r\n    // 如果当前页面在白名单中，不执行暂停\r\n    if (this.isPageInWhitelist(this.currentPage)) {\r\n      console.log('当前页面在白名单中，不执行全局暂停');\r\n      return;\r\n    }\r\n    \r\n    this.previousPollingState = this.isPolling;\r\n    this.globalPaused = true;\r\n    \r\n    if (this.isPolling) {\r\n      this.stopPolling();\r\n      console.log('消息轮询已全局暂停');\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 全局恢复轮询（适用于返回到底部导航页面时）\r\n   * 如果之前处于轮询状态，则会恢复轮询\r\n   */\r\n  resumePollingGlobally() {\r\n    if (!this.globalPaused) return;\r\n    \r\n    this.globalPaused = false;\r\n    \r\n    if (this.previousPollingState) {\r\n      this.startPolling();\r\n      console.log('消息轮询已全局恢复');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行轮询\r\n   */\r\n  async poll() {\r\n    // 如果全局暂停了，且当前页面不在白名单中，直接返回\r\n    if (this.globalPaused && !this.isPageInWhitelist(this.currentPage)) return;\r\n    \r\n    // 如果有注册的未读消息监听器，获取未读消息数\r\n    if (this.listeners.unreadCount.length > 0) {\r\n      this.pollUnreadCount();\r\n    }\r\n\r\n    // 如果有聊天参数和聊天消息监听器，获取聊天消息\r\n    if (this.chatParams && this.listeners.chatMessages.length > 0) {\r\n      this.pollChatMessages();\r\n    }\r\n    \r\n    // 如果有会话列表监听器，获取会话列表\r\n    if (this.conversationParams && this.listeners.conversationList.length > 0) {\r\n      this.pollConversationList();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取未读消息数\r\n   */\r\n  async pollUnreadCount() {\r\n    try {\r\n      const res = await getUnreadCount();\r\n      if (res && res.code === 0) {\r\n        const unreadCount = res.data.unreadCount || 0;\r\n        // 通知所有监听器\r\n        this.listeners.unreadCount.forEach(listener => {\r\n          listener(unreadCount);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('获取未读消息数失败:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取聊天消息\r\n   */\r\n  async pollChatMessages() {\r\n    if (!this.chatParams || !this.chatParams.targetId) return;\r\n\r\n    try {\r\n      const res = await getMessageList({\r\n        targetId: this.chatParams.targetId,\r\n        page: 1,\r\n        size: 20,\r\n        lastId: this.chatParams.lastId || 0\r\n      });\r\n\r\n      if (res && res.code === 0) {\r\n        // 通知所有聊天消息监听器\r\n        this.listeners.chatMessages.forEach(listener => {\r\n          listener(res.data);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('获取聊天消息失败:', error);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取会话列表\r\n   */\r\n  async pollConversationList() {\r\n    if (!this.conversationParams) return;\r\n    \r\n    try {\r\n      // 确保每次获取的是最新数据，不受缓存影响\r\n      const timestamp = new Date().getTime();\r\n      const res = await getConversationList({\r\n        page: this.conversationParams.page || 1,\r\n        size: this.conversationParams.size || 20,\r\n        _t: timestamp // 添加时间戳防止缓存\r\n      });\r\n      \r\n      if (res && res.code === 0) {\r\n        // 通知所有会话列表监听器\r\n        this.listeners.conversationList.forEach(listener => {\r\n          listener(res.data);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('获取会话列表失败:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加未读消息数监听器\r\n   * @param {Function} callback - 监听器回调函数\r\n   * @returns {Function} 移除监听器的函数\r\n   */\r\n  addUnreadCountListener(callback) {\r\n    if (typeof callback !== 'function') return () => {};\r\n    \r\n    this.listeners.unreadCount.push(callback);\r\n    \r\n    // 启动轮询（如果尚未启动）\r\n    if (!this.isPolling) {\r\n      this.startPolling();\r\n    } else {\r\n      // 已经在轮询中，立即获取一次数据\r\n      this.pollUnreadCount();\r\n    }\r\n    \r\n    // 返回移除监听器的函数\r\n    return () => {\r\n      this.removeUnreadCountListener(callback);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 移除未读消息数监听器\r\n   * @param {Function} callback - 要移除的监听器回调函数\r\n   */\r\n  removeUnreadCountListener(callback) {\r\n    const index = this.listeners.unreadCount.indexOf(callback);\r\n    if (index !== -1) {\r\n      this.listeners.unreadCount.splice(index, 1);\r\n    }\r\n    \r\n    // 如果所有监听器都已移除，停止轮询\r\n    this.checkAndStopPolling();\r\n  }\r\n\r\n  /**\r\n   * 设置聊天参数并添加聊天消息监听器\r\n   * @param {Object} params - 聊天参数\r\n   * @param {Number} params.targetId - 聊天目标ID\r\n   * @param {Number} params.lastId - 最后一条消息ID\r\n   * @param {Function} callback - 监听器回调函数\r\n   * @returns {Function} 移除监听器的函数\r\n   */\r\n  setChatParams(params, callback) {\r\n    this.chatParams = params;\r\n    \r\n    if (typeof callback === 'function') {\r\n      this.listeners.chatMessages.push(callback);\r\n      \r\n      // 调整为聊天轮询的间隔\r\n      if (this.isPolling) {\r\n        this.stopPolling();\r\n      }\r\n      this.startPolling();\r\n      \r\n      // 返回移除监听器的函数\r\n      return () => {\r\n        this.removeChatMessageListener(callback);\r\n      };\r\n    }\r\n    \r\n    return () => {};\r\n  }\r\n\r\n  /**\r\n   * 更新聊天参数\r\n   * @param {Object} params - 聊天参数\r\n   */\r\n  updateChatParams(params) {\r\n    if (this.chatParams) {\r\n      this.chatParams = {...this.chatParams, ...params};\r\n    } else {\r\n      this.chatParams = params;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 移除聊天消息监听器\r\n   * @param {Function} callback - 要移除的监听器回调函数\r\n   */\r\n  removeChatMessageListener(callback) {\r\n    const index = this.listeners.chatMessages.indexOf(callback);\r\n    if (index !== -1) {\r\n      this.listeners.chatMessages.splice(index, 1);\r\n    }\r\n    \r\n    // 如果所有聊天监听器被移除，清除聊天参数\r\n    if (this.listeners.chatMessages.length === 0) {\r\n      this.chatParams = null;\r\n      \r\n      // 根据当前活跃的监听器状态调整轮询\r\n      this.adjustPollingState();\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 设置会话列表参数并添加会话列表监听器\r\n   * @param {Object} params - 会话列表参数\r\n   * @param {Number} params.page - 页码\r\n   * @param {Number} params.size - 每页条数\r\n   * @param {Function} callback - 监听器回调函数\r\n   * @returns {Function} 移除监听器的函数\r\n   */\r\n  setConversationParams(params, callback) {\r\n    this.conversationParams = params;\r\n    \r\n    if (typeof callback === 'function') {\r\n      this.listeners.conversationList.push(callback);\r\n      \r\n      // 启动轮询（如果尚未启动）\r\n      if (!this.isPolling) {\r\n        this.startPolling();\r\n      } else {\r\n        // 已经在轮询中，立即获取一次数据\r\n        this.pollConversationList();\r\n      }\r\n      \r\n      // 返回移除监听器的函数\r\n      return () => {\r\n        this.removeConversationListListener(callback);\r\n      };\r\n    }\r\n    \r\n    return () => {};\r\n  }\r\n  \r\n  /**\r\n   * 更新会话列表参数\r\n   * @param {Object} params - 会话列表参数\r\n   */\r\n  updateConversationParams(params) {\r\n    if (this.conversationParams) {\r\n      this.conversationParams = {...this.conversationParams, ...params};\r\n    } else {\r\n      this.conversationParams = params;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 移除会话列表监听器\r\n   * @param {Function} callback - 要移除的监听器回调函数\r\n   */\r\n  removeConversationListListener(callback) {\r\n    const index = this.listeners.conversationList.indexOf(callback);\r\n    if (index !== -1) {\r\n      this.listeners.conversationList.splice(index, 1);\r\n    }\r\n    \r\n    // 如果所有会话列表监听器被移除，清除会话列表参数\r\n    if (this.listeners.conversationList.length === 0) {\r\n      this.conversationParams = null;\r\n      \r\n      // 根据当前活跃的监听器状态调整轮询\r\n      this.adjustPollingState();\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 根据当前活跃的监听器调整轮询状态\r\n   */\r\n  adjustPollingState() {\r\n    // 如果还有任何类型的监听器，保持轮询但可能调整间隔\r\n    const hasAnyListeners = \r\n      this.listeners.unreadCount.length > 0 || \r\n      this.listeners.chatMessages.length > 0 ||\r\n      this.listeners.conversationList.length > 0;\r\n    \r\n    if (hasAnyListeners) {\r\n      // 如果有聊天监听器，使用聊天轮询间隔，否则使用默认间隔\r\n      const shouldUseChatInterval = this.listeners.chatMessages.length > 0;\r\n      \r\n      // 如果轮询间隔需要变更，重新启动轮询\r\n      if (this.isPolling) {\r\n        this.stopPolling();\r\n      }\r\n      this.startPolling();\r\n    } else {\r\n      // 如果没有任何监听器，停止轮询\r\n      this.stopPolling();\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 检查并停止轮询（如果没有活跃的监听器）\r\n   */\r\n  checkAndStopPolling() {\r\n    const hasAnyListeners = \r\n      this.listeners.unreadCount.length > 0 || \r\n      this.listeners.chatMessages.length > 0 ||\r\n      this.listeners.conversationList.length > 0;\r\n    \r\n    if (!hasAnyListeners) {\r\n      this.stopPolling();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清除所有监听器\r\n   */\r\n  clearListeners() {\r\n    this.listeners.unreadCount = [];\r\n    this.listeners.chatMessages = [];\r\n    this.listeners.conversationList = [];\r\n    this.chatParams = null;\r\n    this.conversationParams = null;\r\n    this.stopPolling();\r\n  }\r\n}\r\n\r\n// 导出单例\r\nexport default new MessagePollingService(); "],"names":["uni","getUnreadCount","getMessageList","getConversationList"],"mappings":"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"}