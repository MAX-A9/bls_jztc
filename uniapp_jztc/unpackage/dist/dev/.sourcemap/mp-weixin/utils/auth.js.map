{"version":3,"file":"auth.js","sources":["utils/auth.js"],"sourcesContent":["/**\r\n * 登录授权相关方法\r\n */\r\nimport { user } from '../apis/index.js';\r\nimport { setUserInfo, setToken, getUserInfo, getToken, clearUserLoginState } from './storage.js';\r\nimport { API_CODE } from './constants.js';\r\n\r\n/**\r\n * 检查是否已登录\r\n * @returns {Boolean} 是否已登录\r\n */\r\nexport function isLoggedIn() {\r\n  return !!getToken();\r\n}\r\n\r\n// 重新导出getUserInfo函数，以便其他文件可以从auth.js中导入\r\nexport { getUserInfo };\r\n\r\n/**\r\n * 获取客户信息并保存\r\n * @returns {Promise} 返回Promise对象\r\n */\r\nexport async function fetchAndSaveUserInfo() {\r\n  try {\r\n    const result = await user.getClientInfo();\r\n    \r\n    if (result && result.code === API_CODE.SUCCESS && result.data) {\r\n      // 后端返回的是id字段，而非clientId字段，需要转换\r\n      const userData = result.data;\r\n      \r\n      // 确保兼容性：如果后端返回的是id字段，将其复制到clientId字段\r\n      if (userData.id && !userData.clientId) {\r\n        userData.clientId = userData.id;\r\n      }\r\n      \r\n      // 保存用户信息到本地\r\n      setUserInfo(userData);\r\n      return userData;\r\n    } else {\r\n      const error = new Error(result.message || '获取客户信息失败');\r\n      throw error;\r\n    }\r\n  } catch (error) {\r\n    return Promise.reject(error);\r\n  }\r\n}\r\n\r\n/**\r\n * 静默登录\r\n * @returns {Promise} 返回Promise对象\r\n */\r\nexport async function silentLogin() {\r\n  try {\r\n    // 1. 获取微信登录凭证(code)\r\n    const code = await user.getWxLoginCode();\r\n    \r\n    // 2. 使用code调用后端登录接口\r\n    const loginData = { code };\r\n    \r\n    const loginResult = await user.wxappLogin(loginData);\r\n    \r\n    // 3. 处理后端返回结果，适配实际接口结构\r\n    if (loginResult && loginResult.code === API_CODE.SUCCESS && loginResult.data && loginResult.data.token) {\r\n      // 保存token\r\n      setToken(loginResult.data.token);\r\n      \r\n      // 4. 获取并保存用户信息\r\n      const userInfo = await fetchAndSaveUserInfo();\r\n      \r\n      return {\r\n        ...loginResult.data,\r\n        userInfo\r\n      };\r\n    } else {\r\n      const error = new Error(loginResult.message || '登录失败，返回数据不完整');\r\n      throw error;\r\n    }\r\n  } catch (error) {\r\n    return Promise.reject(error);\r\n  }\r\n}\r\n\r\n/**\r\n * 完整登录流程（包含获取用户信息）\r\n * @returns {Promise} 返回Promise对象\r\n */\r\nexport async function fullLogin() {\r\n  try {\r\n    // 1. 获取微信登录凭证(code)\r\n    const code = await user.getWxLoginCode();\r\n    \r\n    // 2. 获取用户信息\r\n    const wxUserInfo = await user.getWxUserInfo();\r\n    \r\n    // 3. 使用code和用户信息调用后端登录接口\r\n    const loginData = {\r\n      code,\r\n      userInfo: wxUserInfo\r\n    };\r\n    \r\n    const loginResult = await user.wxappLogin(loginData);\r\n    \r\n    // 4. 处理后端返回结果，适配实际接口结构\r\n    if (loginResult && loginResult.code === API_CODE.SUCCESS && loginResult.data && loginResult.data.token) {\r\n      // 保存token\r\n      setToken(loginResult.data.token);\r\n      \r\n      // 5. 获取并保存用户信息\r\n      const userInfo = await fetchAndSaveUserInfo();\r\n      \r\n      // 返回完整的结果\r\n      return {\r\n        ...loginResult.data,\r\n        userInfo\r\n      };\r\n    } else {\r\n      const error = new Error(loginResult.message || '登录失败，返回数据不完整');\r\n      throw error;\r\n    }\r\n  } catch (error) {\r\n    return Promise.reject(error);\r\n  }\r\n}\r\n\r\n/**\r\n * 退出登录\r\n */\r\nexport function logout() {\r\n  clearUserLoginState();\r\n}\r\n\r\n/**\r\n * 检查并自动登录（无感登录）\r\n * @returns {Promise} 返回Promise对象\r\n */\r\nexport async function checkAndAutoLogin() {\r\n  // 如果已登录，先尝试使用已有token获取用户信息\r\n  if (isLoggedIn()) {\r\n    const cachedUserInfo = getUserInfo();\r\n    \r\n    // 缓存中有完整用户信息，直接返回\r\n    // 确保兼容id和clientId字段\r\n    const hasUserId = cachedUserInfo && (cachedUserInfo.clientId || cachedUserInfo.id);\r\n    const hasBasicInfo = cachedUserInfo && cachedUserInfo.realName;\r\n    \r\n    if (hasUserId && hasBasicInfo) {\r\n      return {\r\n        token: getToken(),\r\n        userInfo: cachedUserInfo\r\n      };\r\n    }\r\n    \r\n    // 缓存中没有完整用户信息，但有token，尝试获取用户信息\r\n    try {\r\n      const userInfo = await fetchAndSaveUserInfo();\r\n      return {\r\n        token: getToken(),\r\n        userInfo: userInfo\r\n      };\r\n    } catch (error) {\r\n      // 获取用户信息失败，可能是token已失效，清除登录状态\r\n      clearUserLoginState();\r\n    }\r\n  }\r\n  \r\n  // 没有token或token已失效，尝试静默登录\r\n  try {\r\n    const loginResult = await silentLogin();\r\n    \r\n    // 确保登录结果包含必要的信息\r\n    if (!loginResult.userInfo && loginResult.token) {\r\n      try {\r\n        const userInfo = await fetchAndSaveUserInfo();\r\n        return {\r\n          ...loginResult,\r\n          userInfo\r\n        };\r\n      } catch (infoError) {\r\n        return loginResult;\r\n      }\r\n    }\r\n    \r\n    return loginResult;\r\n  } catch (loginError) {\r\n    return Promise.reject(loginError);\r\n  }\r\n} "],"names":["getToken","user","API_CODE","setUserInfo","setToken","clearUserLoginState","getUserInfo"],"mappings":";;;;AAWO,SAAS,aAAa;AAC3B,SAAO,CAAC,CAACA,cAAAA;AACX;AASO,eAAe,uBAAuB;AAC3C,MAAI;AACF,UAAM,SAAS,MAAMC,gBAAK;AAE1B,QAAI,UAAU,OAAO,SAASC,gBAAQ,SAAC,WAAW,OAAO,MAAM;AAE7D,YAAM,WAAW,OAAO;AAGxB,UAAI,SAAS,MAAM,CAAC,SAAS,UAAU;AACrC,iBAAS,WAAW,SAAS;AAAA,MAC9B;AAGDC,oBAAW,YAAC,QAAQ;AACpB,aAAO;AAAA,IACb,OAAW;AACL,YAAM,QAAQ,IAAI,MAAM,OAAO,WAAW,UAAU;AACpD,YAAM;AAAA,IACP;AAAA,EACF,SAAQ,OAAO;AACd,WAAO,QAAQ,OAAO,KAAK;AAAA,EAC5B;AACH;AAMO,eAAe,cAAc;AAClC,MAAI;AAEF,UAAM,OAAO,MAAMF,gBAAK;AAGxB,UAAM,YAAY,EAAE;AAEpB,UAAM,cAAc,MAAMA,WAAAA,KAAK,WAAW,SAAS;AAGnD,QAAI,eAAe,YAAY,SAASC,yBAAS,WAAW,YAAY,QAAQ,YAAY,KAAK,OAAO;AAEtGE,oBAAAA,SAAS,YAAY,KAAK,KAAK;AAG/B,YAAM,WAAW,MAAM;AAEvB,aAAO;AAAA,QACL,GAAG,YAAY;AAAA,QACf;AAAA,MACR;AAAA,IACA,OAAW;AACL,YAAM,QAAQ,IAAI,MAAM,YAAY,WAAW,cAAc;AAC7D,YAAM;AAAA,IACP;AAAA,EACF,SAAQ,OAAO;AACd,WAAO,QAAQ,OAAO,KAAK;AAAA,EAC5B;AACH;AAMO,eAAe,YAAY;AAChC,MAAI;AAEF,UAAM,OAAO,MAAMH,gBAAK;AAGxB,UAAM,aAAa,MAAMA,gBAAK;AAG9B,UAAM,YAAY;AAAA,MAChB;AAAA,MACA,UAAU;AAAA,IAChB;AAEI,UAAM,cAAc,MAAMA,WAAAA,KAAK,WAAW,SAAS;AAGnD,QAAI,eAAe,YAAY,SAASC,yBAAS,WAAW,YAAY,QAAQ,YAAY,KAAK,OAAO;AAEtGE,oBAAAA,SAAS,YAAY,KAAK,KAAK;AAG/B,YAAM,WAAW,MAAM;AAGvB,aAAO;AAAA,QACL,GAAG,YAAY;AAAA,QACf;AAAA,MACR;AAAA,IACA,OAAW;AACL,YAAM,QAAQ,IAAI,MAAM,YAAY,WAAW,cAAc;AAC7D,YAAM;AAAA,IACP;AAAA,EACF,SAAQ,OAAO;AACd,WAAO,QAAQ,OAAO,KAAK;AAAA,EAC5B;AACH;AAKO,SAAS,SAAS;AACvBC,gBAAAA;AACF;AAMO,eAAe,oBAAoB;AAExC,MAAI,WAAU,GAAI;AAChB,UAAM,iBAAiBC,cAAAA;AAIvB,UAAM,YAAY,mBAAmB,eAAe,YAAY,eAAe;AAC/E,UAAM,eAAe,kBAAkB,eAAe;AAEtD,QAAI,aAAa,cAAc;AAC7B,aAAO;AAAA,QACL,OAAON,cAAAA,SAAU;AAAA,QACjB,UAAU;AAAA,MAClB;AAAA,IACK;AAGD,QAAI;AACF,YAAM,WAAW,MAAM;AACvB,aAAO;AAAA,QACL,OAAOA,cAAAA,SAAU;AAAA,QACjB;AAAA,MACR;AAAA,IACK,SAAQ,OAAO;AAEdK,oBAAAA;IACD;AAAA,EACF;AAGD,MAAI;AACF,UAAM,cAAc,MAAM;AAG1B,QAAI,CAAC,YAAY,YAAY,YAAY,OAAO;AAC9C,UAAI;AACF,cAAM,WAAW,MAAM;AACvB,eAAO;AAAA,UACL,GAAG;AAAA,UACH;AAAA,QACV;AAAA,MACO,SAAQ,WAAW;AAClB,eAAO;AAAA,MACR;AAAA,IACF;AAED,WAAO;AAAA,EACR,SAAQ,YAAY;AACnB,WAAO,QAAQ,OAAO,UAAU;AAAA,EACjC;AACH;;;;;;;"}