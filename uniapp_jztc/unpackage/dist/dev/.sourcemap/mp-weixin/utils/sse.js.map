{"version":3,"file":"sse.js","sources":["utils/sse.js"],"sourcesContent":["/**\r\n * SSE (Server-Sent Events) 工具类\r\n * 用于处理实时消息推送\r\n */\r\nimport { API_BASE_URL } from './constants.js';\r\nimport { getToken } from './storage.js';\r\n\r\nclass SSEConnection {\r\n  constructor() {\r\n    this.socketTask = null;\r\n    this.listeners = {};\r\n    this.isConnected = false;\r\n    this.reconnectAttempts = 0;\r\n    this.maxReconnectAttempts = 5;\r\n    this.reconnectInterval = 3000; // 重连间隔，3秒\r\n  }\r\n  \r\n  /**\r\n   * 连接到SSE接口\r\n   * @param {String} path - 接口路径（不包含域名）\r\n   */\r\n  connect(path) {\r\n    if (this.socketTask) {\r\n      this.disconnect();\r\n    }\r\n    \r\n    try {\r\n      const token = getToken();\r\n      const url = `${API_BASE_URL}${path}`;\r\n      \r\n      // 创建带有认证信息的URL\r\n      const urlWithAuth = token ? `${url}?token=${encodeURIComponent(token)}` : url;\r\n      \r\n      // 创建WebSocket连接 (小程序环境没有原生EventSource，使用WebSocket替代)\r\n      this.socketTask = wx.connectSocket({\r\n        url: urlWithAuth,\r\n        header: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n      \r\n      // 监听连接成功\r\n      this.socketTask.onOpen(() => {\r\n        console.log('SSE连接已建立');\r\n        this.isConnected = true;\r\n        this.reconnectAttempts = 0;\r\n      });\r\n      \r\n      // 监听接收消息\r\n      this.socketTask.onMessage((res) => {\r\n        try {\r\n          const data = JSON.parse(res.data);\r\n          if (data && data.event) {\r\n            // 触发对应事件的回调\r\n            this._triggerEvent(data.event, data.data);\r\n          }\r\n        } catch (e) {\r\n          console.error('SSE消息解析错误:', e);\r\n        }\r\n      });\r\n      \r\n      // 监听连接关闭\r\n      this.socketTask.onClose(() => {\r\n        console.log('SSE连接已关闭');\r\n        this.isConnected = false;\r\n        this._handleReconnect(path);\r\n      });\r\n      \r\n      // 监听连接错误\r\n      this.socketTask.onError((err) => {\r\n        console.error('SSE连接错误:', err);\r\n        this._handleReconnect(path);\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error('SSE连接初始化失败:', error);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 处理重连逻辑\r\n   * @param {String} path - 接口路径\r\n   * @private\r\n   */\r\n  _handleReconnect(path) {\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      console.log(`SSE尝试重连 (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\r\n      \r\n      setTimeout(() => {\r\n        this.connect(path);\r\n      }, this.reconnectInterval);\r\n    } else {\r\n      console.log('SSE重连次数已达上限，停止重连');\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 触发事件\r\n   * @param {String} eventName - 事件名称\r\n   * @param {Object} data - 事件数据\r\n   * @private\r\n   */\r\n  _triggerEvent(eventName, data) {\r\n    if (this.listeners[eventName]) {\r\n      this.listeners[eventName].forEach(callback => {\r\n        try {\r\n          callback(data);\r\n        } catch (e) {\r\n          console.error(`SSE事件回调执行错误(${eventName}):`, e);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 添加事件监听\r\n   * @param {String} eventName - 事件名称\r\n   * @param {Function} callback - 回调函数\r\n   */\r\n  on(eventName, callback) {\r\n    if (!this.listeners[eventName]) {\r\n      this.listeners[eventName] = [];\r\n    }\r\n    this.listeners[eventName].push(callback);\r\n  }\r\n  \r\n  /**\r\n   * 移除事件监听\r\n   * @param {String} eventName - 事件名称\r\n   * @param {Function} callback - 回调函数\r\n   */\r\n  off(eventName, callback) {\r\n    if (this.listeners[eventName]) {\r\n      // 如果提供了回调函数，只移除该回调\r\n      if (callback) {\r\n        this.listeners[eventName] = this.listeners[eventName].filter(cb => cb !== callback);\r\n      } \r\n      // 否则移除该事件的所有监听\r\n      else {\r\n        delete this.listeners[eventName];\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 断开连接\r\n   */\r\n  disconnect() {\r\n    if (this.socketTask) {\r\n      try {\r\n        this.socketTask.close();\r\n      } catch (e) {\r\n        console.error('关闭SSE连接失败:', e);\r\n      }\r\n      this.socketTask = null;\r\n      this.isConnected = false;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取连接状态\r\n   * @returns {Boolean} 是否已连接\r\n   */\r\n  getConnectionStatus() {\r\n    return this.isConnected;\r\n  }\r\n}\r\n\r\n// 单例模式\r\nlet instance = null;\r\n\r\nexport default {\r\n  /**\r\n   * 获取SSE连接实例\r\n   * @returns {SSEConnection} SSE连接实例\r\n   */\r\n  getInstance() {\r\n    if (!instance) {\r\n      instance = new SSEConnection();\r\n    }\r\n    return instance;\r\n  }\r\n}; "],"names":["getToken","API_BASE_URL","wx","uni"],"mappings":"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"}