{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["/**\r\n * 网络请求封装\r\n */\r\nimport { getToken } from './storage.js';\r\nimport { API_BASE_URL, API_TIMEOUT } from './constants.js';\r\n\r\n// 添加事件总线，用于触发登录窗口\r\nlet isShowingLoginModal = false;\r\n\r\n/**\r\n * 发起网络请求\r\n * @param {Object} options 请求配置\r\n * @returns {Promise} 返回Promise对象\r\n */\r\nexport function request(options) {\r\n  return new Promise((resolve, reject) => {\r\n    // 获取token\r\n    const token = getToken();\r\n    \r\n    // 处理请求URL\r\n    const url = /^(http|https):\\/\\//.test(options.url) \r\n      ? options.url \r\n      : API_BASE_URL + options.url;\r\n    \r\n    // 请求头\r\n    const header = {\r\n      'Content-Type': options.contentType || 'application/json',\r\n      ...options.header\r\n    };\r\n    \r\n    // 添加token到请求头\r\n    if (token) {\r\n      header['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    \r\n    // 请求超时定时器\r\n    let timeoutTimer = null;\r\n    \r\n    // 创建超时Promise\r\n    const timeoutPromise = new Promise((_, timeoutReject) => {\r\n      timeoutTimer = setTimeout(() => {\r\n        timeoutReject({ message: '请求超时，请检查网络', code: 'TIMEOUT' });\r\n        task && task.abort(); // 超时后中断请求\r\n      }, options.timeout || API_TIMEOUT);\r\n    });\r\n    \r\n    // 发起请求\r\n    const task = uni.request({\r\n      url,\r\n      data: options.data,\r\n      method: options.method || 'GET',\r\n      header,\r\n      success: (res) => {\r\n        clearTimeout(timeoutTimer);\r\n        \r\n        // 请求成功\r\n        if (res.statusCode >= 200 && res.statusCode < 300) {\r\n          // 直接返回接口数据，不再额外处理\r\n          resolve(res.data);\r\n        } \r\n        // 未授权\r\n        else if (res.statusCode === 401) {\r\n          // 弹出登录窗口，避免多次弹出\r\n          if (!isShowingLoginModal) {\r\n            isShowingLoginModal = true;\r\n\r\n            // 清除本地登录信息\r\n            uni.removeStorageSync('token');\r\n            uni.removeStorageSync('USER_INFO');\r\n            \r\n            // 显示提示\r\n            uni.showModal({\r\n              title: '登录已过期',\r\n              content: '您的登录已过期，请重新登录',\r\n              showCancel: false,\r\n              success: () => {\r\n                // 触发全局登录事件\r\n                uni.$emit('showLoginModal');\r\n                isShowingLoginModal = false;\r\n              }\r\n            });\r\n          }\r\n          \r\n          // 返回错误信息\r\n          reject({ code: 401, message: '未授权或token已过期' });\r\n        } \r\n        // 其他错误\r\n        else {\r\n          reject(res.data || { message: `请求失败，状态码：${res.statusCode}` });\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        clearTimeout(timeoutTimer);\r\n        reject(err || { message: '网络请求失败' });\r\n      },\r\n      complete: () => {\r\n        // 请求完成的回调\r\n        if (options.complete) {\r\n          options.complete();\r\n        }\r\n      }\r\n    });\r\n    \r\n    // 使用Promise.race竞争，哪个先完成就返回哪个结果\r\n    return Promise.race([task, timeoutPromise]);\r\n  });\r\n}\r\n\r\n/**\r\n * GET请求\r\n * @param {String} url 请求地址\r\n * @param {Object} data 请求参数\r\n * @param {Boolean} noAuth 是否不需要授权\r\n * @returns {Promise} 返回Promise对象\r\n */\r\nexport function get(url, data = {}, noAuth = false) {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: API_BASE_URL + url,\r\n      method: 'GET',\r\n      data: data,\r\n      header: {\r\n        'Content-Type': 'application/json',\r\n        ...(!noAuth && { 'Authorization': `Bearer ${getToken()}` })\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data)\r\n        } else if (res.statusCode === 401) {\r\n          // 处理401未授权错误\r\n          if (!isShowingLoginModal) {\r\n            isShowingLoginModal = true;\r\n            \r\n            // 清除本地登录信息\r\n            uni.removeStorageSync('token');\r\n            uni.removeStorageSync('USER_INFO');\r\n            \r\n            // 显示提示\r\n            uni.showModal({\r\n              title: '登录已过期',\r\n              content: '您的登录已过期，请重新登录',\r\n              showCancel: false,\r\n              success: () => {\r\n                // 触发全局登录事件\r\n                uni.$emit('showLoginModal');\r\n                isShowingLoginModal = false;\r\n              }\r\n            });\r\n          }\r\n          \r\n          reject({ code: 401, message: '未授权或token已过期' });\r\n        } else {\r\n          reject(res)\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(err)\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * POST请求\r\n * @param {String} url 请求地址\r\n * @param {Object} data 请求参数\r\n * @param {Object} options 其他配置\r\n * @returns {Promise} 返回Promise对象\r\n */\r\nexport function post(url, data = {}, options = {}) {\r\n  return request({\r\n    url,\r\n    data,\r\n    method: 'POST',\r\n    ...options\r\n  });\r\n}\r\n\r\n/**\r\n * PUT请求\r\n * @param {String} url 请求地址\r\n * @param {Object} data 请求参数\r\n * @param {Object} options 其他配置\r\n * @returns {Promise} 返回Promise对象\r\n */\r\nexport function put(url, data = {}, options = {}) {\r\n  return request({\r\n    url,\r\n    data,\r\n    method: 'PUT',\r\n    ...options\r\n  });\r\n}\r\n\r\n/**\r\n * DELETE请求\r\n * @param {String} url 请求地址\r\n * @param {Object} data 请求参数\r\n * @param {Object} options 其他配置\r\n * @returns {Promise} 返回Promise对象\r\n */\r\nexport function del(url, data = {}, options = {}) {\r\n  return request({\r\n    url,\r\n    data,\r\n    method: 'DELETE',\r\n    ...options\r\n  });\r\n}\r\n\r\nexport default {\r\n  request,\r\n  get,\r\n  post,\r\n  put,\r\n  del\r\n}; "],"names":["getToken","API_BASE_URL","API_TIMEOUT","uni"],"mappings":"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"}